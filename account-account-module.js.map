{"version":3,"sources":["./src/app/account/layout.component.ts","./src/app/account/layout.component.html","./src/app/account/verifypassword/verifypassword.component.ts","./src/app/account/verifypassword/verifypassword.component.html","./src/app/account/login.component.ts","./src/app/account/login.component.html","./src/app/account/resetpassword/resetpassword.component.ts","./src/app/account/resetpassword/resetpassword.component.html","./src/app/account/account.module.ts","./src/app/account/register.component.ts","./src/app/account/register.component.html","./src/app/account/account-routing.module.ts"],"names":[],"mappings":"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","file":"account-account-module.js","sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AccountService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'layout.component.html' })\r\nexport class LayoutComponent {\r\n    constructor(\r\n        private router: Router,\r\n        private accountService: AccountService\r\n    ) {\r\n        // redirect to home if already logged in\r\n        if (this.accountService.userValue) {\r\n            this.router.navigate(['/']);\r\n        }\r\n    }\r\n}","<link href=\"//netdna.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n    <link rel=\"stylesheet\" href=\"/assets/css/bootstrap.min.css\">\r\n    <link rel=\"stylesheet\" href=\"/assets/vendor/font-awesome/css/font-awesome.min.css\">\r\n    <link rel=\"stylesheet\" href=\"/assets/vendor/linearicons/style.css\">\r\n    <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\r\n    <link rel=\"stylesheet\" href=\"/assets/css/demo.css\">\r\n    <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700\" rel=\"stylesheet\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/assets/img/apple-icon.png\">\r\n\r\n\r\n<div>\r\n    <router-outlet></router-outlet>\r\n</div>\r\n\r\n<script src=\"/assets/vendor/jquery/jquery.min.js\"></script>\r\n<script src=\"/assets/vendor/bootstrap/js/bootstrap.min.js\"></script>\r\n<script src=\"/assets/vendor/jquery-slimscroll/jquery.slimscroll.min.js\"></script>\r\n<script src=\"/assets/vendor/jquery.easy-pie-chart/jquery.easypiechart.min.js\"></script>\r\n<script src=\"/assets/vendor/chartist/js/chartist.min.js\"></script>\r\n<script src=\"/assets/scripts/klorofil-common.js\"></script>","import { HttpParams } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { User } from '@app/_models';\r\nimport { AccountService, AlertService } from '@app/_services';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-verifypassword',\r\n  templateUrl: './verifypassword.component.html',\r\n  styleUrls: ['./verifypassword.component.less']\r\n})\r\nexport class VerifypasswordComponent implements OnInit {\r\n\r\n  user: User;\r\n  form: FormGroup;\r\n  id: string;\r\n  token: any;\r\n  email: string;\r\n  isAddMode: boolean;\r\n  loading = false;\r\n  submitted = false;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private accountService: AccountService,\r\n    private alertService: AlertService) {\r\n    const url = window.location.href;\r\n    console.log(url);\r\n    if (url.includes('?')) {\r\n      const httpParams = new HttpParams({ fromString: url.split('?')[1] });\r\n      if (url.indexOf) {\r\n        this.token = httpParams.get('token');\r\n        this.email = httpParams.get('email');\r\n        if(this.token!=null)\r\n        {\r\n          this.token=this.token.replace(/ /g, \"\\+\");\r\n        }\r\n      }\r\n  }\r\n}\r\n\r\n  ngOnInit(): void {\r\n    //get queryString from url\r\n    \r\n    // password not required in edit mode\r\n    const passwordValidators = [Validators.minLength(8)];\r\n    this.isAddMode = true;\r\n    if (this.isAddMode) {\r\n      passwordValidators.push(Validators.required);\r\n    }\r\n    this.form = this.formBuilder.group({\r\n      token: this.token.replace(/ /g, \"\\+\"),\r\n      email: this.email,\r\n      newpassword: ['', passwordValidators],\r\n      confirmpassword: ['', passwordValidators]\r\n    }, { validator: this.mustMatch('newpassword', 'confirmpassword') });\r\n\r\n  }\r\n  mustMatch(controlName: string, matchingControlName: string) {\r\n    return (group: FormGroup) => {\r\n      const control = group.controls[controlName];\r\n      const matchingControl = group.controls[matchingControlName];\r\n\r\n      if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n        // return if another validator has already found an error on the matchingControl\r\n        return;\r\n      }\r\n\r\n      // set error on matchingControl if validation fails\r\n      if (control.value !== matchingControl.value) {\r\n        matchingControl.setErrors({ mustMatch: true });\r\n      } else {\r\n        matchingControl.setErrors(null);\r\n      }\r\n    }\r\n  }\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.form.controls; }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // reset alerts on submit\r\n    this.alertService.clear();\r\n\r\n    // stop here if form is invalid\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n    console.log(this.f.token.value);\r\n    console.log(this.f.email.value);\r\n  debugger;\r\n    this.loading = true;\r\n    this.accountService.verifypassword(this.f.token.value, this.f.newpassword.value, this.f.email.value)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (user) => {\r\n          // get return url from query parameters or default to home page\r\n          if (user.isSuccess) {\r\n            this.router.navigateByUrl(\"login\");\r\n          }\r\n          else {\r\n            console.warn('error');\r\n            this.alertService.error(user.errors[0]);\r\n            this.loading = false;\r\n            user.isSuccess = false;\r\n          }\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n}\r\n","<!-- {{token}}\r\n<div class=\"card\">\r\n  <h4 class=\"card-header\"> Verify Password</h4>\r\n  <div class=\"card-body\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n      <input type=\"hidden\" formControlName=\"token\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.token.errors }\" />\r\n      <input type=\"hidden\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n      <div class=\"form-group\">\r\n        <label for=\"newpassword\">New Password</label>\r\n        <input type=\"password\" formControlName=\"newpassword\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.newpassword.errors }\" />\r\n        <div *ngIf=\"submitted && f.newpassword.errors\" class=\"invalid-feedback\">\r\n          <div *ngIf=\"f.newpassword.errors.required\">New Password is required.</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"confirmpassword\">Confirm Password</label>\r\n        <input type=\"password\" formControlName=\"confirmpassword\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmpassword.errors }\" />\r\n        <div *ngIf=\"submitted && f.confirmpassword.errors\" class=\"invalid-feedback\">\r\n          <div *ngIf=\"f.confirmpassword.errors.required\">Confirm Password is required.</div>\r\n          <div *ngIf=\"f.confirmpassword.errors.mustMatch\">New Password and Confirm Password must match.</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n          <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n          Submit\r\n        </button>\r\n        <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n -->\r\n\r\n\r\n\r\n\r\n<div class=\"main\">\r\n  <!-- MAIN CONTENT -->\r\n  <div class=\"main-content\">\r\n    <div class=\"container-fluid\">\r\n      <!-- OVERVIEW -->\r\n            <div id=\"wrapper\">\r\n              <div class=\"vertical-align-wrap\">\r\n                <div class=\"vertical-align-middle\">\r\n                  <div class=\"auth-box \">\r\n                    <div class=\"left\">\r\n                      <div class=\"content\">\r\n                        <div class=\"header\" style=\"display: block;\">\r\n                          <div class=\"logo text-center\"><img src=\"assets/img/header_logo.png\" class=\"w-50\"\r\n                              alt=\"Klorofil Logo\"></div>\r\n                          <p class=\"lead\">Verify Password</p>\r\n                        </div>\r\n                        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n                          <input type=\"hidden\" formControlName=\"token\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.token.errors }\" />\r\n                          <input type=\"hidden\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n                          <div class=\"form-group\">\r\n                            <label class=\"control-label sr-only\" for=\"newpassword\">New Password</label>\r\n                            <input type=\"password\" formControlName=\"newpassword\" class=\"form-control\" placeholder=\"New Password\" [ngClass]=\"{ 'is-invalid': submitted && f.newpassword.errors }\" />\r\n                            <div *ngIf=\"submitted && f.newpassword.errors\" class=\"invalid-feedback\">\r\n                              <div *ngIf=\"f.newpassword.errors.required\">New Password is required.</div>\r\n                            </div>\r\n                          </div>\r\n                          <div class=\"form-group\">\r\n                            <label class=\"control-label sr-only\" for=\"confirmpassword\">Confirm Password</label>\r\n                            <input type=\"password\" formControlName=\"confirmpassword\" class=\"form-control\" placeholder=\"New Password\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmpassword.errors }\" />\r\n                            <div *ngIf=\"submitted && f.confirmpassword.errors\" class=\"invalid-feedback\">\r\n                              <div *ngIf=\"f.confirmpassword.errors.required\">Confirm Password is required.</div>\r\n                              <div *ngIf=\"f.confirmpassword.errors.mustMatch\">New Password and Confirm Password must match.</div>\r\n                            </div>\r\n                          </div>\r\n                          <div class=\"form-group\">\r\n                            <div class=\"row\">\r\n                              <div class=\"col-6 pr-1\">\r\n                            <button [disabled]=\"loading\" class=\"btn btn-primary btn-lg btn-block\">\r\n                              <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                              Submit\r\n                            </button>\r\n                              </div>\r\n                                <div class=\"col-6 pl-1\">\r\n                            <a routerLink=\"../login\" class=\"btn btn-primary btn-lg btn-block\">Cancel</a>\r\n                                </div>\r\n                            </div>\r\n                          </div>\r\n                        </form>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"right\">\r\n                      <div class=\"overlay\"></div>\r\n                      <div class=\"content text\">\r\n                        <h1 class=\"heading\">Free Bootstrap dashboard template</h1>\r\n                        <p>by The Develovers</p>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"clearfix\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n        <!-- END OVERVIEW -->\r\n      </div>\r\n    </div>\r\n    <!-- END MAIN CONTENT -->\r\n  </div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'login.component.html' })\r\nexport class LoginComponent implements OnInit {\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            emailid: ['', [Validators.required,Validators.email]],\r\n            password: ['',Validators.required]\r\n            // password: ['',[ Validators.required,Validators.pattern(\"^[a-z0-9_-]{8,15}$\")]]\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; } \r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.login(this.f.emailid.value, this.f.password.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    // get return url from query parameters or default to home page\r\n                    const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/admin/home';\r\n                    this.router.navigateByUrl(returnUrl);\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","\r\n<div id=\"wrapper\">\r\n    <div class=\"vertical-align-wrap\">\r\n        <div class=\"vertical-align-middle\">\r\n            <div class=\"auth-box \">\r\n                <div class=\"left\">\r\n                    <div class=\"content\">\r\n                        <div class=\"header\" style=\"display: block;\">\r\n                            <div class=\"logo text-center\"><img src=\"assets/img/header_logo.png\" class=\"w-50\" alt=\"Klorofil Logo\"></div>\r\n                            <p class=\"lead\">Login to your account</p>\r\n                        </div>\r\n                        <form class=\"form-auth-small\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n                            <div class=\"form-group\">\r\n                                <label class=\"control-label sr-only\" for=\"emailid\">Email </label>\r\n                                <input type=\"text\" formControlName=\"emailid\" class=\"form-control\"\r\n                                    [ngClass]=\"{ 'is-invalid': submitted && f.emailid.errors }\" placeholder=\"Email\" />\r\n                                <div *ngIf=\"submitted && f.emailid.errors\" class=\"invalid-feedback\">\r\n                                    <div *ngIf=\"f.emailid.errors.required\" class=\"text-sm-left\">Email is required</div>\r\n                                    <div *ngIf=\"f.emailid.errors.email\" class=\"text-sm-left\">Email is not valid</div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label class=\"control-label sr-only\" for=\"password\">Password</label>\r\n                                <input type=\"password\" formControlName=\"password\" class=\"form-control\"\r\n                                    [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"\r\n                                    placeholder=\"Password\" />\r\n                                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                                    <div *ngIf=\"f.password.errors.required\" class=\"text-sm-left\">Password is required</div>\r\n                                    <div *ngIf=\"f.password.errors.pattern\" class=\"text-sm-left\">Please Enter Strong Password</div>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-6 pr-1\">\r\n                                        <button [disabled]=\"loading\" class=\"btn btn-primary btn-lg btn-block\">\r\n                                            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                                            Login\r\n                                        </button>\r\n                                    </div>\r\n                                    <div class=\"col-6 pl-1\">\r\n                                        <a routerLink=\"../register\"\r\n                                            class=\"btn btn-primary btn-lg btn-block\">Register</a>\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <a routerLink=\"../forgotpassword\"\r\n                                    class=\"btn btn-link btn-lg btn-block\"><span class=\"lnr lnr-lock\"></span>forgotpassword</a>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div class=\"right\">\r\n                    <div class=\"overlay\"></div>\r\n                    <div class=\"content text\">\r\n                        <h1 class=\"heading\">Free Bootstrap dashboard template</h1>\r\n                        <p>by The Develovers</p>\r\n                    </div>\r\n                </div>\r\n                <!-- <div class=\"clearfix\"></div> -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from 'src/app/_services';\r\n\r\n@Component({\r\n  selector: 'app-resetpassword',\r\n  templateUrl: './resetpassword.component.html',\r\n  styleUrls: ['./resetpassword.component.less']\r\n})\r\nexport class ResetpasswordComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  id: string;\r\n  loading = false;\r\n  submitted = false;\r\n  title = \"Sparkleweb\";\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private accountService: AccountService,\r\n    private alertService: AlertService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]]\r\n    });\r\n  }\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.form.controls; }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // reset alerts on submit\r\n    this.alertService.clear();\r\n\r\n    // stop here if form is invalid\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.accountService.resetpassword(this.f.email.value)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (user) => {\r\n          if (user.isSuccess) {\r\n            this.alertService.success(user.message);\r\n            this.loading = false;\r\n            alert(user.message);\r\n            //get return url from query parameters or default to home page\r\n            const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n            this.router.navigateByUrl(returnUrl);\r\n          }\r\n          else {\r\n            this.alertService.error(user.errors[0]);\r\n            this.loading = false;\r\n            user.isSuccess = false;\r\n          }\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n}\r\n","<!-- <div class=\"card\">\r\n  <h4 class=\"card-header\">{{title}} Reset Password</h4>\r\n  <div class=\"card-body\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">Email Address</label>\r\n        <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n          <div *ngIf=\"f.email.errors.required\">Email Address is required.</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n          <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n          Submit\r\n        </button>\r\n        <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div> -->\r\n\r\n\r\n\r\n<div id=\"wrapper\">\r\n  <div class=\"vertical-align-wrap\">\r\n      <div class=\"vertical-align-middle\">\r\n          <div class=\"auth-box \">\r\n              <div class=\"left\">\r\n                  <div class=\"content\">\r\n                      <div class=\"header\" style=\"display: block;\">\r\n                          <div class=\"logo text-center\"><img src=\"assets/img/header_logo.png\" class=\"w-50\" alt=\"Klorofil Logo\"></div>\r\n                          <p class=\"lead\">Forgot Password</p>\r\n                      </div>\r\n                      <!-- <form class=\"form-auth-small\" action=\"index.php\">\r\n                          <div class=\"form-group\">\r\n                              <label for=\"signin-email\" class=\"control-label sr-only\">Email</label>\r\n                              <input type=\"email\" class=\"form-control\" id=\"signin-email\" value=\"samuel.gold@domain.com\" placeholder=\"Email\">\r\n                              \r\n                          </div>\r\n                          <div class=\"form-group\">\r\n                              <label for=\"signin-password\" class=\"control-label sr-only\">Password</label>\r\n                              <input type=\"password\" class=\"form-control\" id=\"signin-password\" value=\"thisisthepassword\" placeholder=\"Password\">\r\n                          </div>\r\n                          <div class=\"form-group clearfix\">\r\n                              <label class=\"fancy-checkbox element-left\">\r\n                                  <input type=\"checkbox\">\r\n                                  <span>Remember me</span>\r\n                              </label>\r\n                          </div>\r\n                          <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block\">LOGIN</button>\r\n                          <div class=\"bottom\">\r\n                              <span class=\"helper-text\"><i class=\"fa fa-lock\"></i> <a href=\"#\">Forgot password?</a></span>\r\n                          </div>\r\n                      </form> -->\r\n\r\n                      <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n                        <div class=\"form-group\">\r\n                          <label class=\"control-label sr-only\" for=\"username\">Email Address</label>\r\n                          <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" placeholder=\"Email\" />\r\n                          <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.email.errors.required\" class=\"text-sm-left\">Email Address is required.</div>\r\n                            <div *ngIf=\"f.email.errors.email\" class=\"text-sm-left\">Email Address is Invalid.</div>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"form-group\" >\r\n                          <div class=\"row\">\r\n                          <div class=\"col-6 pr-1\">\r\n                          <button [disabled]=\"loading\" class=\"btn btn-primary btn-lg btn-block\">\r\n                            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                            Submit\r\n                          </button>\r\n                        </div>\r\n                        <div class=\"col-6 pl-1\" >\r\n                          <a routerLink=\"../login\" class=\"btn btn-primary btn-lg btn-block\">Cancel</a>\r\n                        </div>\r\n                      </div>\r\n                        </div>\r\n                      </form>\r\n                  </div>\r\n              </div>\r\n              <div class=\"right\">\r\n                  <div class=\"overlay\"></div>\r\n                  <div class=\"content text\">\r\n                      <h1 class=\"heading\">Free Bootstrap dashboard template</h1>\r\n                      <p>by The Develovers</p>\r\n                  </div>\r\n              </div>\r\n              <div class=\"clearfix\"></div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\nimport { ResetpasswordComponent } from './resetpassword/resetpassword.component';\r\nimport { VerifypasswordComponent } from './verifypassword/verifypassword.component';\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        AccountRoutingModule\r\n    ],\r\n    declarations: [\r\n        LayoutComponent,\r\n        LoginComponent,\r\n        RegisterComponent,\r\n        ResetpasswordComponent,\r\n        VerifypasswordComponent\r\n    ]\r\n})\r\nexport class AccountModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'register.component.html' })\r\nexport class RegisterComponent implements OnInit {\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            emailid: ['', [Validators.required,Validators.email]],\r\n            mobileNo: ['', Validators.required],\r\n            password: ['', Validators.required]\r\n            // password: ['', [ Validators.required,Validators.pattern(\"^[a-z0-9_-]{8,15}$\")]]\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.register(this.form.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Registration successful', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","<!-- <div class=\"card\">\r\n    <h4 class=\"card-header\">Register</h4>\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"form-group\">\r\n                <label for=\"name\"> Name</label>\r\n                <input type=\"text\" formControlName=\"name\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.name.errors }\" />\r\n                <div *ngIf=\"submitted && f.name.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.name.errors.required\"> Name is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"emailid\">Email</label>\r\n                <input type=\"text\" formControlName=\"emailid\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.emailid.errors }\" />\r\n                <div *ngIf=\"submitted && f.emailid.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.emailid.errors.required\">Email is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"mobileNo\">mobileNo</label>\r\n                <input type=\"text\" formControlName=\"mobileNo\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.mobileNo.errors }\" />\r\n                <div *ngIf=\"submitted && f.mobileNo.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.mobileNo.errors.required\">mobileNo is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">password</label>\r\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.password.errors.required\">password is required</div>\r\n                    <div *ngIf=\"f.password.errors.minlength\">password must be at least 6 characters</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                    Register\r\n                </button>\r\n                <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div> -->\r\n\r\n<div id=\"wrapper\">\r\n    <div class=\"vertical-align-wrap\">\r\n        <div class=\"vertical-align-middle\">\r\n            <div class=\"auth-box \">\r\n                <div class=\"left\">\r\n                    <div class=\"content\">\r\n                        <div class=\"header\" style=\"display: block;\">\r\n                            <div class=\"logo text-center\"><img src=\"assets/img/header_logo.png\" class=\"w-50\"\r\n                                    alt=\"Klorofil Logo\"></div>\r\n                            <p class=\"lead\">Sign Up to your account</p>\r\n                        </div>\r\n                        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n                            <div class=\"form-group\">\r\n                                <label class=\"control-label sr-only\" for=\"name\"> Name</label>\r\n                                <input type=\"text\" formControlName=\"name\" class=\"form-control\"\r\n                                    [ngClass]=\"{ 'is-invalid': submitted && f.name.errors }\" placeholder=\"Name\" />\r\n                                <div *ngIf=\"submitted && f.name.errors\" class=\"invalid-feedback\">\r\n                                    <div *ngIf=\"f.name.errors.required\" class=\"text-sm-left\"> Name is required</div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label class=\"control-label sr-only\" for=\"emailid\">Email</label>\r\n                                <input type=\"text\" formControlName=\"emailid\" class=\"form-control\"\r\n                                    [ngClass]=\"{ 'is-invalid': submitted && f.emailid.errors }\" placeholder=\"Email\" />\r\n                                <div *ngIf=\"submitted && f.emailid.errors\" class=\"invalid-feedback\">\r\n                                    <div *ngIf=\"f.emailid.errors.required\" class=\"text-sm-left\">Email is required</div>\r\n                                    <div *ngIf=\"f.emailid.errors.email\">Email is not valid</div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label class=\"control-label sr-only\" for=\"mobileNo\">mobileNo</label>\r\n                                <input type=\"text\" formControlName=\"mobileNo\" class=\"form-control\"\r\n                                    [ngClass]=\"{ 'is-invalid': submitted && f.mobileNo.errors }\"\r\n                                    placeholder=\"Mobile Number\" />\r\n                                <div *ngIf=\"submitted && f.mobileNo.errors\" class=\"invalid-feedback\">\r\n                                    <div *ngIf=\"f.mobileNo.errors.required\" class=\"text-sm-left\">mobileNo is required\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label class=\"control-label sr-only\" for=\"password\">password</label>\r\n                                <input type=\"password\" formControlName=\"password\" class=\"form-control\"\r\n                                    [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"\r\n                                    placeholder=\"Password\" />\r\n                                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                                    <div *ngIf=\"f.password.errors.required\" class=\"text-sm-left\">password is required\r\n                                    </div>\r\n                                    <div *ngIf=\"f.password.errors.pattern\" class=\"text-sm-left\">Please Enter Strong Password</div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-6 pr-1\">\r\n                                        <button [disabled]=\"loading\" class=\"btn btn-primary btn-lg btn-block\">\r\n                                            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                                            Register\r\n                                        </button>\r\n                                    </div>\r\n                                    <div class=\"col-6 pl-1\">\r\n                                    <a routerLink=\"../login\" class=\"btn btn-primary btn-lg btn-block\">Cancel</a>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <div class=\"right\">\r\n                <div class=\"overlay\"></div>\r\n                <div class=\"content text\">\r\n                    <h1 class=\"heading\">Free Bootstrap dashboard template</h1>\r\n                    <p>by The Develovers</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"clearfix\"></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\nimport { ResetpasswordComponent } from './resetpassword/resetpassword.component';\r\nimport { VerifypasswordComponent } from './verifypassword/verifypassword.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: LayoutComponent,\r\n        children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'register', component: RegisterComponent },\r\n            { path: 'forgotpassword', component: ResetpasswordComponent },\r\n            { path: 'verifypassword', component: VerifypasswordComponent }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }"],"sourceRoot":"webpack:///"}